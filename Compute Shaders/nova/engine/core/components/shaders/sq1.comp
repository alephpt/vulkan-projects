#version 460

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform UBO_T { float deltaTime; } ubo;
layout (std140, binding = 1) readonly buffer ParticlesIn { Particle particles_in[]; };
layout (std140, binding = 2) buffer ParticlesOut { Particle particles_out[]; };

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

vec4 applyMotionBlur(vec3 background, vec2 disk_position, vec2 pixel_location, vec2 disk_velocity, vec3 disk_color){
    vec2 distance_from_center = pixel_location - disk_position;
    float a = dot(disk_velocity, disk_velocity);
    float b = dot(disk_velocity, distance_from_center);
    float c = dot(distance_from_center, distance_from_center) - dot(disk_position, disk_position);
    float d = b * b - a * c;

    if (d < 0.0) {
        return vec4(background, 1.0);
    }

    d = sqrt(d);
    float t1 = max((-b - d) / a, 0.0);
    float t2 = min((-b + d) / a, 1.0); // let's try delta time here next time

    if (t1 < t2) {
        vec2 intersection = disk_position + disk_velocity * t1;
        float distance = length(intersection - pixel_location);
        float alpha = 1.0 - smoothstep(0.0, 1.0, distance / disk_position.x);
        return vec4(mix(background, disk_color, alpha), alpha);
    }

    return vec4(background, 1.0);
}

vec3 randomVec3(float seed) {
    return vec3(
        fract(sin(seed) * 43758.5453),
        fract(cos(seed) * 43758.5453),
        fract(tan(seed) * 43758.5453)
    );
}

vec4 randomVec4(float seed) {
    return vec4(
        fract(sin(seed) * 43758.5453),
        fract(cos(seed) * 43758.5453),
        fract(tan(seed) * 43758.5453),
        1.0
    );
}

const float disk_speed = 0.3;

vec2 diskPosition(float delta_time, vec4 id) {
    float angle = id.x * 6.28318530718;
    float radius = 0.5 + 0.5 * sin(id.y * 6.28318530718);
    return vec2(cos(angle), sin(angle)) * radius;
}

vec2 diskVelocity(float delta_time, vec4 id) {
    float angle = id.x * 6.28318530718;
    return vec2(cos(angle), sin(angle)) * disk_speed;
}

void applyDiskMotionBlur(out vec4 color, out vec2 pixel_location, out vec2 velocity, vec4 id) {
    vec2 disk_position = diskPosition(ubo.deltaTime, id);
    vec2 disk_velocity = diskVelocity(ubo.deltaTime, id);
    vec3 disk_color = randomVec3(id.x);
    vec3 background_color = vec3(0.0, 0.0, 0.0);
    color = applyMotionBlur(background_color, disk_position, pixel_location, disk_velocity, disk_color);
    pixel_location = disk_position;
    velocity = disk_velocity;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    Particle p = particles_in[index];
    
    vec4 color = p.color;
    vec2 position = p.position;
    vec2 velocity = p.velocity;

    vec4 id = randomVec4(float(index));
    applyDiskMotionBlur(color, position, velocity, id);

    p.color = color;
    p.position = position + velocity * ubo.deltaTime;
    p.velocity = velocity + p.velocity * ubo.deltaTime * 2.0;
    particles_out[index] = p;
}
        