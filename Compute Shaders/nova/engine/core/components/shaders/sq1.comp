#version 450

const float disk_speed = 0.3;
const vec3 background_color = vec3(0.1, 0.2, 0.3);

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform UBO_T { float deltaTime; } ubo;
layout (std140, binding = 1) readonly buffer ParticlesIn { Particle particles_in[]; };
layout (std140, binding = 2) buffer ParticlesOut { Particle particles_out[]; };

layout (local_size_x = 64, local_size_y = 16, local_size_z = 1) in;

vec4 applyMotionBlur(vec3 background, inout vec2 pixel_location, vec2 disk_velocity, vec4 disk_color){
    vec2 center = vec2(0.0);
    vec2 distance_from_center = pixel_location - center;
    float a = dot(disk_velocity, disk_velocity);
    float b = dot(disk_velocity, distance_from_center);
    float c = dot(distance_from_center, distance_from_center) - dot(disk_velocity, disk_velocity) * dot(pixel_location, pixel_location);
    float d = b * b - a * c;

    if (d < 0.0) {
        return vec4(background, 1.0);
    }

    d = sqrt(d);
    float t1 = max((-b - d) / a, 0.0);
    float t2 = min((-b + d) / a, 1.0); // let's try delta time here next time

    if (t1 < t2) {
        vec2 intersection = pixel_location + disk_velocity * t1;
        float distance = length(intersection - pixel_location);
        float alpha = 1.0 - smoothstep(0.0, 1.0, distance / pixel_location.x);
        return vec4(mix(background, disk_color.rgb, alpha), alpha);
    }

    return vec4(background, 1.0);
}

vec2 calculateOrbitVelocity(vec2 velocity, vec2 position) {
    vec2 center = vec2(0.0);
    vec2 distance_from_center = position - center;
    vec2 tangent = normalize(vec2(-distance_from_center.y, distance_from_center.x));
    return tangent * disk_speed;
}

void applyDiskMotionBlur(out vec4 color, inout vec2 pixel_location, vec2 velocity) {
    vec4 transition_color = applyMotionBlur(background_color, pixel_location, velocity, color);
    color = transition_color * ubo.deltaTime;
    pixel_location += velocity * ubo.deltaTime;
}

void main() {
    uint index = gl_GlobalInvocationID.y * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
    Particle p = particles_in[index];

    vec2 velocity = calculateOrbitVelocity(p.velocity, p.position);
    applyDiskMotionBlur(p.color, p.position, velocity);

    particles_out[index] = p;
}